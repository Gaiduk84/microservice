package com.itm.space.backendresources.api.response;

import lombok.Data;

import java.util.List;

@Data
public class UserResponse {
    private final String email;
    private final String firstName;
    private final String lastName;
    private final List<String> roles;
    private final List<String> groups;

}
/* теоретический конспект

 1. Тестирование программного обеспечения
 Тестирование — это процесс проверки программного обеспечения с целью выявления ошибок и недостатков в его работе. Тестирование помогает убедиться, что программное обеспечение соответствует требованиям и работает корректно в различных условиях.

 2. Unit-тестирование
 Unit-тестирование — это метод тестирования, при котором отдельные модули (единицы) программного обеспечения проверяются на корректность работы. Целью unit-тестирования является проверка того, что каждый модуль программы работает правильно и соответствует ожиданиям.

 3. JUnit 5
 JUnit 5 — это фреймворк для unit-тестирования в Java. Он предоставляет аннотации и методы для написания и выполнения тестов.

 Основные аннотации JUnit 5:

 @Test: Указывает, что метод является тестовым.

 @BeforeEach: Метод, аннотированный этой аннотацией, выполняется перед каждым тестовым методом.

 @AfterEach: Метод, аннотированный этой аннотацией, выполняется после каждого тестового метода.

 @BeforeAll: Метод, аннотированный этой аннотацией, выполняется один раз перед всеми тестами.

 @AfterAll: Метод, аннотированный этой аннотацией, выполняется один раз после всех тестов.

 Основные методы JUnit 5:

 assertEquals: Проверяет, что два значения равны.

 assertThrows: Проверяет, что выполнение кода выбрасывает ожидаемое исключение.

 assertTrue: Проверяет, что условие истинно.

 assertFalse: Проверяет, что условие ложно.

 4. Mockito
 Mockito — это фреймворк для создания моков (заглушек) и шпионов (объектов, которые отслеживают вызовы методов) в Java. Моки используются для изоляции тестируемого кода от зависимостей, что позволяет тестировать код в контролируемых условиях.

 Основные аннотации Mockito:

 @Mock: Создает мок объекта.

 @InjectMocks: Создает объект и внедряет в него моки, созданные с помощью @Mock.

 @Spy: Создает шпион объекта.

 Основные методы Mockito:

 when: Указывает, какой результат должен возвращать мок-метод.

 verify: Проверяет, что метод был вызван с определенными параметрами.

 doThrow: Указывает, что мок-метод должен выбросить исключение.

 5. MapStruct
 MapStruct — это библиотека для маппинга объектов в Java. Она автоматически генерирует реализации интерфейсов, которые выполняют преобразования между объектами разных типов.

 Основные аннотации MapStruct:

 @Mapper: Указывает, что интерфейс является интерфейсом маппера.

 @Mapping: Указывает правила маппинга между полями исходных и целевых объектов.

 @Named: Указывает имя метода, который будет использоваться для выполнения преобразования.

 6. Spring Boot
 Spring Boot — это фреймворк для создания приложений на основе Spring. Он предоставляет множество утилит и аннотаций для упрощения разработки и тестирования приложений.

 Основные аннотации Spring Boot:

 @SpringBootTest: Указывает, что класс является тестовым классом Spring Boot.

 @Autowired: Внедряет зависимость в тестовый класс.

 @Value: Внедряет значение из конфигурационного файла в тестовый класс.

 7. Keycloak
 Keycloak — это сервер аутентификации и авторизации, который предоставляет API для управления пользователями и ролями. В нашей программе мы использовали Keycloak для работы с пользователями и их ролями.

 8. Аннотации валидации
 Аннотации валидации используются для проверки корректности данных, передаваемых в объекты. В нашей программе мы использовали аннотации из пакета javax.validation.constraints.

 Основные аннотации валидации:

 @NotBlank: Проверяет, что строка не является пустой или состоит только из пробелов.

 @Size: Проверяет, что длина строки находится в заданном диапазоне.

 @Email: Проверяет, что строка является валидным email-адресом.

 Заключение
 В нашей программе для тестирования мы использовали следующие технологии и концепции:

 JUnit 5 для написания и выполнения unit-тестов.

 Mockito для создания моков и шпионов.

 MapStruct для маппинга объектов.

 Spring Boot для упрощения разработки и тестирования приложений.

 Keycloak для работы с пользователями и их ролями.

 Аннотации валидации для проверки корректности данных.

 Эти технологии и концепции позволяют нам создавать надежные и легко тестируемые приложения.*/